
[
  {
    "problemStatement": "**Two Sum**\n\nGiven an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. \n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "code": "function twoSum(nums, target) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    if (map.has(complement)) {\n      return [map.get(complement), i];\n    }\n    map.set(nums[i], i);\n  }\n  return null;\n}",
    "testCases": [
      {
        "input": {
          "nums": [2, 7, 11, 15],
          "target": 9
        },
        "output": [0, 1]
      },
      {
        "input": {
          "nums": [3, 2, 4],
          "target": 6
        },
        "output": [1, 2]
      },
      {
        "input": {
          "nums": [3, 3],
          "target": 6
        },
        "output": [0, 1]
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  return JSON.stringify(output) === JSON.stringify(expectedOutput);\n}"
  },
  {
    "problemStatement": "**Reverse a Linked List**\n\nGiven the head of a singly linked list, reverse the list.\n\n**Example:**\n\nInput: `head = [1, 2, 3, 4, 5]`\nOutput: `[5, 4, 3, 2, 1]`",
    "code": "class ListNode {\n  constructor(val = 0, next = null) {\n    this.val = val;\n    this.next = next;\n  }\n}\n\nfunction reverseList(head) {\n  let prev = null;\n  let curr = head;\n  while (curr) {\n    const next = curr.next;\n    curr.next = prev;\n    prev = curr;\n    curr = next;\n  }\n  return prev;\n}",
    "testCases": [
      {
        "input": {
          "head": [1, 2, 3, 4, 5]
        },
        "output": [5, 4, 3, 2, 1]
      },
      {
        "input": {
          "head": [1, 2]
        },
        "output": [2, 1]
      },
      {
        "input": {
          "head": []
        },
        "output": []
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  let outputNode = output;\n  let expectedNode = expectedOutput;\n  while (outputNode && expectedNode) {\n    if (outputNode.val !== expectedNode.val) {\n      return false;\n    }\n    outputNode = outputNode.next;\n    expectedNode = expectedNode.next;\n  }\n  return outputNode === null && expectedNode === null;\n}"
  },
  {
    "problemStatement": "**Valid Parentheses**\n\nGiven a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n\n**Example:**\n\nInput: `s = \"()[]{}`\"\nOutput: `true`\n\nInput: `s = \"(]\"`\nOutput: `false`",
    "code": "function isValid(s) {\n  const stack = [];\n  const map = {')': '(', '}': '{', ']': '['};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (map[char]) {\n      if (stack.length === 0 || stack.pop() !== map[char]) {\n        return false;\n      }\n    } else {\n      stack.push(char);\n    }\n  }\n  return stack.length === 0;\n}",
    "testCases": [
      {
        "input": {
          "s": "()"
        },
        "output": true
      },
      {
        "input": {
          "s": "()[]{}"
        },
        "output": true
      },
      {
        "input": {
          "s": "(]"
        },
        "output": false
      },
      {
        "input": {
          "s": "([)]"
        },
        "output": false
      },
      {
        "input": {
          "s": "{[]}"
        },
        "output": true
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  return output === expectedOutput;\n}"
  },
  {
    "problemStatement": "**Merge Two Sorted Lists**\n\nMerge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.\n\n**Example:**\n\nInput: `list1 = [1, 2, 4], list2 = [1, 3, 4]`\nOutput: `[1, 1, 2, 3, 4, 4]`",
    "code": "class ListNode {\n  constructor(val = 0, next = null) {\n    this.val = val;\n    this.next = next;\n  }\n}\n\nfunction mergeTwoLists(list1, list2) {\n  let dummy = new ListNode();\n  let tail = dummy;\n  while (list1 && list2) {\n    if (list1.val < list2.val) {\n      tail.next = list1;\n      list1 = list1.next;\n    } else {\n      tail.next = list2;\n      list2 = list2.next;\n    }\n    tail = tail.next;\n  }\n  tail.next = list1 || list2;\n  return dummy.next;\n}",
    "testCases": [
      {
        "input": {
          "list1": [1, 2, 4],
          "list2": [1, 3, 4]
        },
        "output": [1, 1, 2, 3, 4, 4]
      },
      {
        "input": {
          "list1": [],
          "list2": []
        },
        "output": []
      },
      {
        "input": {
          "list1": [],
          "list2": [0]
        },
        "output": [0]
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  let outputNode = output;\n  let expectedNode = expectedOutput;\n  while (outputNode && expectedNode) {\n    if (outputNode.val !== expectedNode.val) {\n      return false;\n    }\n    outputNode = outputNode.next;\n    expectedNode = expectedNode.next;\n  }\n  return outputNode === null && expectedNode === null;\n}"
  },
  {
    "problemStatement": "**Remove Duplicates from Sorted Array**\n\nGiven a sorted array `nums`, remove the duplicates in-place such that each element appears only once and returns the new length.\n\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n\n**Example:**\n\nInput: `nums = [1, 1, 2]`\nOutput: `2, nums = [1, 2]`\n\nExplanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the returned length.",
    "code": "function removeDuplicates(nums) {\n  if (nums.length === 0) {\n    return 0;\n  }\n  let i = 0;\n  for (let j = 1; j < nums.length; j++) {\n    if (nums[j] !== nums[i]) {\n      i++;\n      nums[i] = nums[j];\n    }\n  }\n  return i + 1;\n}",
    "testCases": [
      {
        "input": {
          "nums": [1, 1, 2]
        },
        "output": 2
      },
      {
        "input": {
          "nums": [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
        },
        "output": 5
      },
      {
        "input": {
          "nums": []
        },
        "output": 0
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  return output === expectedOutput;\n}"
  },
  {
    "problemStatement": "**Longest Substring Without Repeating Characters**\n\nGiven a string `s`, find the length of the longest substring without repeating characters.\n\n**Example:**\n\nInput: `s = \"abcabcbb\"`\nOutput: `3`\nExplanation: The answer is \"abc\", with the length of 3.",
    "code": "function lengthOfLongestSubstring(s) {\n  let maxLength = 0;\n  let start = 0;\n  const seen = new Set();\n  for (let i = 0; i < s.length; i++) {\n    while (seen.has(s[i])) {\n      seen.delete(s[start]);\n      start++;\n    }\n    seen.add(s[i]);\n    maxLength = Math.max(maxLength, i - start + 1);\n  }\n  return maxLength;\n}",
    "testCases": [
      {
        "input": {
          "s": "abcabcbb"
        },
        "output": 3
      },
      {
        "input": {
          "s": "bbbbb"
        },
        "output": 1
      },
      {
        "input": {
          "s": "pwwkew"
        },
        "output": 3
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  return output === expectedOutput;\n}"
  },
  {
    "problemStatement": "**Find the First Non-Repeating Character**\n\nGiven a string `s`, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\n**Example:**\n\nInput: `s = \"leetcode\"`\nOutput: `0`\n\nInput: `s = \"loveleetcode\"`\nOutput: `2`",
    "code": "function firstUniqChar(s) {\n  const charCount = {};\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    charCount[char] = (charCount[char] || 0) + 1;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (charCount[s[i]] === 1) {\n      return i;\n    }\n  }\n  return -1;\n}",
    "testCases": [
      {
        "input": {
          "s": "leetcode"
        },
        "output": 0
      },
      {
        "input": {
          "s": "loveleetcode"
        },
        "output": 2
      },
      {
        "input": {
          "s": "aabb"
        },
        "output": -1
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  return output === expectedOutput;\n}"
  },
  {
    "problemStatement": "**Find All Anagrams in a String**\n\nGiven two strings `s` and `p`, find all the start indices of `p`'s anagrams in `s`. You may return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\n\n**Example:**\n\nInput: `s = \"cbaebabacd\", p = \"abc`\"\nOutput: `[0, 6]`\nExplanation:\nThe substring with start index 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index 6 is \"bac\", which is an anagram of \"abc\".",
    "code": "function findAnagrams(s, p) {\n  const result = [];\n  if (s.length < p.length) {\n    return result;\n  }\n  const pCount = {};\n  for (let i = 0; i < p.length; i++) {\n    pCount[p[i]] = (pCount[p[i]] || 0) + 1;\n  }\n  let windowStart = 0;\n  let windowEnd = 0;\n  let charCount = {};\n  while (windowEnd < s.length) {\n    const char = s[windowEnd];\n    charCount[char] = (charCount[char] || 0) + 1;\n    if (windowEnd - windowStart + 1 === p.length) {\n      if (JSON.stringify(charCount) === JSON.stringify(pCount)) {\n        result.push(windowStart);\n      }\n      charCount[s[windowStart]]--;\n      if (charCount[s[windowStart]] === 0) {\n        delete charCount[s[windowStart]];\n      }\n      windowStart++;\n    }\n    windowEnd++;\n  }\n  return result;\n}",
    "testCases": [
      {
        "input": {
          "s": "cbaebabacd",
          "p": "abc"
        },
        "output": [0, 6]
      },
      {
        "input": {
          "s": "abab",
          "p": "ab"
        },
        "output": [0, 1, 2]
      },
      {
        "input": {
          "s": "aa",
          "p": "aa"
        },
        "output": [0]
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  return JSON.stringify(output) === JSON.stringify(expectedOutput);\n}"
  },
  {
    "problemStatement": "**Group Anagrams**\n\nGiven an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\n\n**Example:**\n\nInput: `strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]`\nOutput: `[[ \"ate\", \"eat\", \"tea\" ], [ \"nat\", \"tan\" ], [ \"bat\" ]]`",
    "code": "function groupAnagrams(strs) {\n  const anagrams = {};\n  for (let i = 0; i < strs.length; i++) {\n    const sortedStr = strs[i].split('').sort().join('');\n    if (anagrams[sortedStr]) {\n      anagrams[sortedStr].push(strs[i]);\n    } else {\n      anagrams[sortedStr] = [strs[i]];\n    }\n  }\n  return Object.values(anagrams);\n}",
    "testCases": [
      {
        "input": {
          "strs": ["eat", "tea", "tan", "ate", "nat", "bat"]
        },
        "output": [["ate", "eat", "tea"], ["nat", "tan"], ["bat"]]
      },
      {
        "input": {
          "strs": [""]
        },
        "output": [""]
      },
      {
        "input": {
          "strs": ["a"]
        },
        "output": ["a"]
      }
    ],
    "validationScript": "function validate(input, output, expectedOutput) {\n  if (output.length !== expectedOutput.length) {\n    return false;\n  }\n  for (let i = 0; i < output.length; i++) {\n    if (!output[i].sort().every((item, index) => item === expectedOutput[i][index])) {\n      return false;\n    }\n  }\n  return true;\n}"
  }
]
