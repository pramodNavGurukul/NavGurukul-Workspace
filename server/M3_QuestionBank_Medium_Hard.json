
[
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the sum of all the even numbers in the array.",
    "code": "function sumEvenNumbers(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n}",
    "testCases": [
      {
        "input": [1, 2, 3, 4, 5, 6],
        "output": 12
      },
      {
        "input": [1, 3, 5, 7, 9],
        "output": 0
      },
      {
        "input": [2, 4, 6, 8, 10],
        "output": 30
      }
    ],
    "validationScript": "const sumEvenNumbers = require('./solution');\n\ntest('sumEvenNumbers', () => {\n  expect(sumEvenNumbers([1, 2, 3, 4, 5, 6])).toBe(12);\n  expect(sumEvenNumbers([1, 3, 5, 7, 9])).toBe(0);\n  expect(sumEvenNumbers([2, 4, 6, 8, 10])).toBe(30);\n});"
  },
  {
    "problemStatement": "Given a string, reverse the order of words in the string.",
    "code": "function reverseWords(str) {\n  return str.split(' ').reverse().join(' ');\n}",
    "testCases": [
      {
        "input": "This is a test string",
        "output": "string test a is This"
      },
      {
        "input": "Hello world",
        "output": "world Hello"
      },
      {
        "input": "One two three",
        "output": "three two One"
      }
    ],
    "validationScript": "const reverseWords = require('./solution');\n\ntest('reverseWords', () => {\n  expect(reverseWords('This is a test string')).toBe('string test a is This');\n  expect(reverseWords('Hello world')).toBe('world Hello');\n  expect(reverseWords('One two three')).toBe('three two One');\n});"
  },
  {
    "problemStatement": "Write a function that takes an array of strings and returns a new array with only the strings that are palindromes.",
    "code": "function getPalindromes(strings) {\n  return strings.filter(str => {\n    return str === str.split('').reverse().join('');\n  });\n}",
    "testCases": [
      {
        "input": ['racecar', 'level', 'hello', 'world', 'madam'],
        "output": ['racecar', 'level', 'madam']
      },
      {
        "input": ['apple', 'banana', 'civic', 'deified', 'kayak'],
        "output": ['civic', 'deified', 'kayak']
      },
      {
        "input": ['abc', 'def', 'ghi'],
        "output": []
      }
    ],
    "validationScript": "const getPalindromes = require('./solution');\n\ntest('getPalindromes', () => {\n  expect(getPalindromes(['racecar', 'level', 'hello', 'world', 'madam'])).toEqual(['racecar', 'level', 'madam']);\n  expect(getPalindromes(['apple', 'banana', 'civic', 'deified', 'kayak'])).toEqual(['civic', 'deified', 'kayak']);\n  expect(getPalindromes(['abc', 'def', 'ghi'])).toEqual([]);\n});"
  },
  {
    "problemStatement": "Given two arrays of numbers, return a new array containing the common elements.",
    "code": "function findCommonElements(arr1, arr2) {\n  return arr1.filter(element => arr2.includes(element));\n}",
    "testCases": [
      {
        "input": [[1, 2, 3, 4, 5], [3, 5, 7, 9]],
        "output": [3, 5]
      },
      {
        "input": [[10, 20, 30, 40], [5, 10, 15, 20]],
        "output": [10, 20]
      },
      {
        "input": [[1, 2, 3], [4, 5, 6]],
        "output": []
      }
    ],
    "validationScript": "const findCommonElements = require('./solution');\n\ntest('findCommonElements', () => {\n  expect(findCommonElements([1, 2, 3, 4, 5], [3, 5, 7, 9])).toEqual([3, 5]);\n  expect(findCommonElements([10, 20, 30, 40], [5, 10, 15, 20])).toEqual([10, 20]);\n  expect(findCommonElements([1, 2, 3], [4, 5, 6])).toEqual([]);\n});"
  },
  {
    "problemStatement": "Implement a function that takes a string and returns the number of vowels in the string.",
    "code": "function countVowels(str) {\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n}",
    "testCases": [
      {
        "input": "hello world",
        "output": 3
      },
      {
        "input": "programming",
        "output": 2
      },
      {
        "input": "javascript",
        "output": 3
      }
    ],
    "validationScript": "const countVowels = require('./solution');\n\ntest('countVowels', () => {\n  expect(countVowels('hello world')).toBe(3);\n  expect(countVowels('programming')).toBe(2);\n  expect(countVowels('javascript')).toBe(3);\n});"
  },
  {
    "problemStatement": "Implement a function that takes a string and returns a new string with the first letter of each word capitalized.",
    "code": "function capitalizeFirstLetter(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}",
    "testCases": [
      {
        "input": "hello world",
        "output": "Hello World"
      },
      {
        "input": "this is a test string",
        "output": "This Is A Test String"
      },
      {
        "input": "javascript is fun",
        "output": "Javascript Is Fun"
      }
    ],
    "validationScript": "const capitalizeFirstLetter = require('./solution');\n\ntest('capitalizeFirstLetter', () => {\n  expect(capitalizeFirstLetter('hello world')).toBe('Hello World');\n  expect(capitalizeFirstLetter('this is a test string')).toBe('This Is A Test String');\n  expect(capitalizeFirstLetter('javascript is fun')).toBe('Javascript Is Fun');\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the second largest number in the array.",
    "code": "function findSecondLargest(numbers) {\n  if (numbers.length < 2) {\n    return undefined;\n  }\n  let largest = Math.max(...numbers);\n  let secondLargest = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] !== largest && numbers[i] > secondLargest) {\n      secondLargest = numbers[i];\n    }\n  }\n  return secondLargest;\n}",
    "testCases": [
      {
        "input": [10, 5, 20, 15, 30],
        "output": 20
      },
      {
        "input": [1, 2, 3, 4, 5],
        "output": 4
      },
      {
        "input": [100, 100, 100, 100],
        "output": 100
      }
    ],
    "validationScript": "const findSecondLargest = require('./solution');\n\ntest('findSecondLargest', () => {\n  expect(findSecondLargest([10, 5, 20, 15, 30])).toBe(20);\n  expect(findSecondLargest([1, 2, 3, 4, 5])).toBe(4);\n  expect(findSecondLargest([100, 100, 100, 100])).toBe(100);\n});"
  },
  {
    "problemStatement": "Given a string, check if it is a valid email address.",
    "code": "function isValidEmail(email) {\n  const emailRegex = /^[\\w-]+(?:\\.[\\w-]+)*@(?:[\\w-]+\\.)+[\\w-]{2,}$/;\n  return emailRegex.test(email);\n}",
    "testCases": [
      {
        "input": "john.doe@example.com",
        "output": true
      },
      {
        "input": "jane.doe@example.co.uk",
        "output": true
      },
      {
        "input": "invalid-email",
        "output": false
      }
    ],
    "validationScript": "const isValidEmail = require('./solution');\n\ntest('isValidEmail', () => {\n  expect(isValidEmail('john.doe@example.com')).toBe(true);\n  expect(isValidEmail('jane.doe@example.co.uk')).toBe(true);\n  expect(isValidEmail('invalid-email')).toBe(false);\n});"
  },
  {
    "problemStatement": "Implement a function that takes two arrays of numbers and returns a new array containing only the elements that are present in both arrays.",
    "code": "function findCommonElements(arr1, arr2) {\n  return arr1.filter(element => arr2.includes(element));\n}",
    "testCases": [
      {
        "input": [[1, 2, 3, 4, 5], [3, 5, 7, 9]],
        "output": [3, 5]
      },
      {
        "input": [[10, 20, 30, 40], [5, 10, 15, 20]],
        "output": [10, 20]
      },
      {
        "input": [[1, 2, 3], [4, 5, 6]],
        "output": []
      }
    ],
    "validationScript": "const findCommonElements = require('./solution');\n\ntest('findCommonElements', () => {\n  expect(findCommonElements([1, 2, 3, 4, 5], [3, 5, 7, 9])).toEqual([3, 5]);\n  expect(findCommonElements([10, 20, 30, 40], [5, 10, 15, 20])).toEqual([10, 20]);\n  expect(findCommonElements([1, 2, 3], [4, 5, 6])).toEqual([]);\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the product of all the numbers in the array.",
    "code": "function productOfArray(numbers) {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n}",
    "testCases": [
      {
        "input": [1, 2, 3, 4, 5],
        "output": 120
      },
      {
        "input": [2, 4, 6, 8],
        "output": 384
      },
      {
        "input": [10, 20, 30],
        "output": 6000
      }
    ],
    "validationScript": "const productOfArray = require('./solution');\n\ntest('productOfArray', () => {\n  expect(productOfArray([1, 2, 3, 4, 5])).toBe(120);\n  expect(productOfArray([2, 4, 6, 8])).toBe(384);\n  expect(productOfArray([10, 20, 30])).toBe(6000);\n});"
  },
  {
    "problemStatement": "Given a string, remove all the duplicate characters from the string.",
    "code": "function removeDuplicateCharacters(str) {\n  let uniqueChars = '';\n  for (let i = 0; i < str.length; i++) {\n    if (!uniqueChars.includes(str[i])) {\n      uniqueChars += str[i];\n    }\n  }\n  return uniqueChars;\n}",
    "testCases": [
      {
        "input": "hello world",
        "output": "helo wrd"
      },
      {
        "input": "programming",
        "output": "progamn"
      },
      {
        "input": "javascript",
        "output": "javascrpt"
      }
    ],
    "validationScript": "const removeDuplicateCharacters = require('./solution');\n\ntest('removeDuplicateCharacters', () => {\n  expect(removeDuplicateCharacters('hello world')).toBe('helo wrd');\n  expect(removeDuplicateCharacters('programming')).toBe('progamn');\n  expect(removeDuplicateCharacters('javascript')).toBe('javascrpt');\n});"
  },
  {
    "problemStatement": "Implement a function that takes a string and returns the number of words in the string.",
    "code": "function countWords(str) {\n  return str.trim().split(' ').length;\n}",
    "testCases": [
      {
        "input": "hello world",
        "output": 2
      },
      {
        "input": "this is a test string",
        "output": 5
      },
      {
        "input": "  javascript  ",
        "output": 1
      }
    ],
    "validationScript": "const countWords = require('./solution');\n\ntest('countWords', () => {\n  expect(countWords('hello world')).toBe(2);\n  expect(countWords('this is a test string')).toBe(5);\n  expect(countWords('  javascript  ')).toBe(1);\n});"
  },
  {
    "problemStatement": "Given a string, find the longest substring without repeating characters.",
    "code": "function longestSubstringWithoutRepeatingCharacters(str) {\n  let longestSubstring = '';\n  let currentSubstring = '';\n  for (let i = 0; i < str.length; i++) {\n    if (!currentSubstring.includes(str[i])) {\n      currentSubstring += str[i];\n      if (currentSubstring.length > longestSubstring.length) {\n        longestSubstring = currentSubstring;\n      }\n    } else {\n      currentSubstring = str[i];\n    }\n  }\n  return longestSubstring;\n}",
    "testCases": [
      {
        "input": "abcabcbb",
        "output": "abc"
      },
      {
        "input": "bbbbb",
        "output": "b"
      },
      {
        "input": "pwwkew",
        "output": "wke"
      }
    ],
    "validationScript": "const longestSubstringWithoutRepeatingCharacters = require('./solution');\n\ntest('longestSubstringWithoutRepeatingCharacters', () => {\n  expect(longestSubstringWithoutRepeatingCharacters('abcabcbb')).toBe('abc');\n  expect(longestSubstringWithoutRepeatingCharacters('bbbbb')).toBe('b');\n  expect(longestSubstringWithoutRepeatingCharacters('pwwkew')).toBe('wke');\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the sum of all the numbers in the array.",
    "code": "function sumArray(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}",
    "testCases": [
      {
        "input": [1, 2, 3, 4, 5],
        "output": 15
      },
      {
        "input": [10, 20, 30, 40, 50],
        "output": 150
      },
      {
        "input": [],
        "output": 0
      }
    ],
    "validationScript": "const sumArray = require('./solution');\n\ntest('sumArray', () => {\n  expect(sumArray([1, 2, 3, 4, 5])).toBe(15);\n  expect(sumArray([10, 20, 30, 40, 50])).toBe(150);\n  expect(sumArray([])).toBe(0);\n});"
  },
  {
    "problemStatement": "Given a string, check if it is a valid URL.",
    "code": "function isValidUrl(url) {\n  const urlRegex = /^(https?:\/\/)?([\da-z.-]+)\.([a-z.]{2,6})([\/\w \.-]*)*\/?$/;\n  return urlRegex.test(url);\n}",
    "testCases": [
      {
        "input": "https://www.google.com",
        "output": true
      },
      {
        "input": "http://example.org",
        "output": true
      },
      {
        "input": "invalid-url",
        "output": false
      }
    ],
    "validationScript": "const isValidUrl = require('./solution');\n\ntest('isValidUrl', () => {\n  expect(isValidUrl('https://www.google.com')).toBe(true);\n  expect(isValidUrl('http://example.org')).toBe(true);\n  expect(isValidUrl('invalid-url')).toBe(false);\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of strings and returns a new array with the strings sorted alphabetically.",
    "code": "function sortStrings(strings) {\n  return strings.sort();\n}",
    "testCases": [
      {
        "input": ['apple', 'banana', 'cherry', 'date'],
        "output": ['apple', 'banana', 'cherry', 'date']
      },
      {
        "input": ['zebra', 'aardvark', 'cat', 'dog'],
        "output": ['aardvark', 'cat', 'dog', 'zebra']
      },
      {
        "input": ['javascript', 'python', 'java', 'c++'],
        "output": ['c++', 'java', 'javascript', 'python']
      }
    ],
    "validationScript": "const sortStrings = require('./solution');\n\ntest('sortStrings', () => {\n  expect(sortStrings(['apple', 'banana', 'cherry', 'date'])).toEqual(['apple', 'banana', 'cherry', 'date']);\n  expect(sortStrings(['zebra', 'aardvark', 'cat', 'dog'])).toEqual(['aardvark', 'cat', 'dog', 'zebra']);\n  expect(sortStrings(['javascript', 'python', 'java', 'c++'])).toEqual(['c++', 'java', 'javascript', 'python']);\n});"
  },
  {
    "problemStatement": "Given a string, find the first non-repeating character.",
    "code": "function findFirstNonRepeatingCharacter(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return null;\n}",
    "testCases": [
      {
        "input": "abcabcbb",
        "output": 'a'
      },
      {
        "input": "leetcode",
        "output": 'l'
      },
      {
        "input": "aabbcc",
        "output": null
      }
    ],
    "validationScript": "const findFirstNonRepeatingCharacter = require('./solution');\n\ntest('findFirstNonRepeatingCharacter', () => {\n  expect(findFirstNonRepeatingCharacter('abcabcbb')).toBe('a');\n  expect(findFirstNonRepeatingCharacter('leetcode')).toBe('l');\n  expect(findFirstNonRepeatingCharacter('aabbcc')).toBe(null);\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the average of all the numbers in the array.",
    "code": "function calculateAverage(numbers) {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}",
    "testCases": [
      {
        "input": [1, 2, 3, 4, 5],
        "output": 3
      },
      {
        "input": [10, 20, 30, 40, 50],
        "output": 30
      },
      {
        "input": [],
        "output": 0
      }
    ],
    "validationScript": "const calculateAverage = require('./solution');\n\ntest('calculateAverage', () => {\n  expect(calculateAverage([1, 2, 3, 4, 5])).toBe(3);\n  expect(calculateAverage([10, 20, 30, 40, 50])).toBe(30);\n  expect(calculateAverage([])).toBe(0);\n});"
  },
  {
    "problemStatement": "Write a function that takes an array of numbers and returns a new array with only the unique numbers.",
    "code": "function getUniqueNumbers(numbers) {\n  return [...new Set(numbers)];\n}",
    "testCases": [
      {
        "input": [1, 2, 3, 4, 5, 1, 2, 3],
        "output": [1, 2, 3, 4, 5]
      },
      {
        "input": [10, 20, 30, 10, 20, 40],
        "output": [10, 20, 30, 40]
      },
      {
        "input": [1, 1, 1, 1, 1],
        "output": [1]
      }
    ],
    "validationScript": "const getUniqueNumbers = require('./solution');\n\ntest('getUniqueNumbers', () => {\n  expect(getUniqueNumbers([1, 2, 3, 4, 5, 1, 2, 3])).toEqual([1, 2, 3, 4, 5]);\n  expect(getUniqueNumbers([10, 20, 30, 10, 20, 40])).toEqual([10, 20, 30, 40]);\n  expect(getUniqueNumbers([1, 1, 1, 1, 1])).toEqual([1]);\n});"
  },
  {
    "problemStatement": "Implement a function that takes two strings and returns true if they are anagrams of each other, and false otherwise.",
    "code": "function areAnagrams(str1, str2) {\n  if (str1.length !== str2.length) {\n    return false;\n  }\n  const sortedStr1 = str1.toLowerCase().split('').sort().join('');\n  const sortedStr2 = str2.toLowerCase().split('').sort().join('');\n  return sortedStr1 === sortedStr2;\n}",
    "testCases": [
      {
        "input": ['listen', 'silent'],
        "output": true
      },
      {
        "input": ['hello', 'world'],
        "output": false
      },
      {
        "input": ['racecar', 'carrace'],
        "output": true
      }
    ],
    "validationScript": "const areAnagrams = require('./solution');\n\ntest('areAnagrams', () => {\n  expect(areAnagrams('listen', 'silent')).toBe(true);\n  expect(areAnagrams('hello', 'world')).toBe(false);\n  expect(areAnagrams('racecar', 'carrace')).toBe(true);\n});"
  },
  {
    "problemStatement": "Given a string, check if it is a palindrome.",
    "code": "function isPalindrome(str) {\n  const cleanStr = str.toLowerCase().replace(/[^a-z0-9]/g, '');\n  return cleanStr === cleanStr.split('').reverse().join('');\n}",
    "testCases": [
      {
        "input": "racecar",
        "output": true
      },
      {
        "input": "level",
        "output": true
      },
      {
        "input": "hello",
        "output": false
      }
    ],
    "validationScript": "const isPalindrome = require('./solution');\n\ntest('isPalindrome', () => {\n  expect(isPalindrome('racecar')).toBe(true);\n  expect(isPalindrome('level')).toBe(true);\n  expect(isPalindrome('hello')).toBe(false);\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the median of all the numbers in the array.",
    "code": "function calculateMedian(numbers) {\n  if (numbers.length === 0) {\n    return undefined;\n  }\n  numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  if (numbers.length % 2 === 0) {\n    return (numbers[middleIndex - 1] + numbers[middleIndex]) / 2;\n  } else {\n    return numbers[middleIndex];\n  }\n}",
    "testCases": [
      {
        "input": [1, 2, 3, 4, 5],
        "output": 3
      },
      {
        "input": [10, 20, 30, 40, 50],
        "output": 30
      },
      {
        "input": [1, 2, 3, 4],
        "output": 2.5
      }
    ],
    "validationScript": "const calculateMedian = require('./solution');\n\ntest('calculateMedian', () => {\n  expect(calculateMedian([1, 2, 3, 4, 5])).toBe(3);\n  expect(calculateMedian([10, 20, 30, 40, 50])).toBe(30);\n  expect(calculateMedian([1, 2, 3, 4])).toBe(2.5);\n});"
  },
  {
    "problemStatement": "Given an array of numbers, find the maximum sum of a contiguous subarray.",
    "code": "function maxSubarraySum(arr) {\n  let maxSoFar = arr[0];\n  let maxEndingHere = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);\n    maxSoFar = Math.max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}",
    "testCases": [
      {
        "input": [-2, 1, -3, 4, -1, 2, 1, -5, 4],
        "output": 6
      },
      {
        "input": [1, 2, 3, 4, 5],
        "output": 15
      },
      {
        "input": [-1, -2, -3, -4, -5],
        "output": -1
      }
    ],
    "validationScript": "const maxSubarraySum = require('./solution');\n\ntest('maxSubarraySum', () => {\n  expect(maxSubarraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4])).toBe(6);\n  expect(maxSubarraySum([1, 2, 3, 4, 5])).toBe(15);\n  expect(maxSubarraySum([-1, -2, -3, -4, -5])).toBe(-1);\n});"
  },
  {
    "problemStatement": "Implement a function that takes a string and returns a new string with all the vowels removed.",
    "code": "function removeVowels(str) {\n  return str.replace(/[aeiouAEIOU]/g, '');\n}",
    "testCases": [
      {
        "input": "hello world",
        "output": "hll wrld"
      },
      {
        "input": "programming",
        "output": "prgrmmng"
      },
      {
        "input": "javascript",
        "output": "jvscrpt"
      }
    ],
    "validationScript": "const removeVowels = require('./solution');\n\ntest('removeVowels', () => {\n  expect(removeVowels('hello world')).toBe('hll wrld');\n  expect(removeVowels('programming')).toBe('prgrmmng');\n  expect(removeVowels('javascript')).toBe('jvscrpt');\n});"
  },
  {
    "problemStatement": "Given a string, find the number of occurrences of a given substring.",
    "code": "function countSubstringOccurrences(str, substring) {\n  let count = 0;\n  let index = str.indexOf(substring);\n  while (index !== -1) {\n    count++;\n    index = str.indexOf(substring, index + 1);\n  }\n  return count;\n}",
    "testCases": [
      {
        "input": ['hello world', 'world'],
        "output": 1
      },
      {
        "input": ['banana', 'ana'],
        "output": 2
      },
      {
        "input": ['javascript', 'java'],
        "output": 1
      }
    ],
    "validationScript": "const countSubstringOccurrences = require('./solution');\n\ntest('countSubstringOccurrences', () => {\n  expect(countSubstringOccurrences('hello world', 'world')).toBe(1);\n  expect(countSubstringOccurrences('banana', 'ana')).toBe(2);\n  expect(countSubstringOccurrences('javascript', 'java')).toBe(1);\n});"
  },
  {
    "problemStatement": "Implement a function that takes an array of numbers and returns the minimum number in the array.",
    "code": "function findMinimum(numbers) {\n  if (numbers.length === 0) {\n    return undefined;\n  }\n  let minimum = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minimum) {\n      minimum = numbers[i];\n    }\n  }\n  return minimum;\n}",
    "testCases": [
      {
        "input": [10, 5, 20, 15, 30],
        "output": 5
      },
      {
        "input": [1, 2, 3, 4, 5],
        "output": 1
      },
      {
        "input": [100, 100, 100, 100],
        "output": 100
      }
    ],
    "validationScript": "const findMinimum = require('./solution');\n\ntest('findMinimum', () => {\n  expect(findMinimum([10, 5, 20, 15, 30])).toBe(5);\n  expect(findMinimum([1, 2, 3, 4, 5])).toBe(1);\n  expect(findMinimum([100, 100, 100, 100])).toBe(100);\n});"
  },
  {
    "problemStatement": "Given a string, find the first occurrence of a given character.",
    "code": "function findFirstOccurrence(str, char) {\n  return str.indexOf(char);\n}",
    "testCases": [
      {
        "input": ['hello world', 'l'],
        "output": 2
      },
      {
        "input": ['banana', 'a'],
        "output": 1
      },
      {
        "input": ['javascript', 'z'],
        "output": -1
      }
    ],
    "validationScript": "const findFirstOccurrence = require('./solution');\n\ntest('findFirstOccurrence', () => {\n  expect(findFirstOccurrence('hello world', 'l')).toBe(2);\n  expect(findFirstOccurrence('banana', 'a')).toBe(1);\n  expect(findFirstOccurrence('javascript', 'z')).toBe(-1);\n});"
  },
  {
    "problemStatement": "Implement a function that takes